using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using DeepCore.Client.API;
using MelonLoader;
using ReMod.Core.VRChat;
using UnityEngine;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
	// Token: 0x0200005E RID: 94
	internal class ItemLagger
	{
		// Token: 0x060001ED RID: 493 RVA: 0x0000D58A File Offset: 0x0000B78A
		public static void State(bool s)
		{
			if (s)
			{
				ItemLagger.pickups = OnLoadedScaneManager.allBaseUdonItem.ToList<VRC_Pickup>();
				ItemLagger.ToggleColliders(true);
				ItemLagger.IsEnabled = true;
				return;
			}
			ItemLagger.ToggleColliders(false);
			ItemLagger.IsEnabled = false;
			ItemLagger.pickups.Clear();
		}

		// Token: 0x060001EE RID: 494 RVA: 0x0000D5C4 File Offset: 0x0000B7C4
		public static void OnUpdate()
		{
			if (ItemLagger.IsEnabled)
			{
				ItemLagger.elapsedTime += Time.deltaTime;
				if (ItemLagger.elapsedTime <= ItemLagger.lagInterval)
				{
					ItemLagger.MovePickups(new Vector3(0f, 3.402823E+37f, 2f));
					return;
				}
				if (ItemLagger.elapsedTime <= ItemLagger.lagInterval * 2f)
				{
					ItemLagger.MovePickups(Networking.LocalPlayer.gameObject.transform.forward * 2f);
					return;
				}
				ItemLagger.elapsedTime = 0f;
			}
		}

		// Token: 0x060001EF RID: 495 RVA: 0x0000D650 File Offset: 0x0000B850
		public static void ToggleColliders(bool isEnabled)
		{
			if (ItemLagger.pickups == null || ItemLagger.pickups.Count == 0 || !ItemLagger.IsEnabled)
			{
				return;
			}
			foreach (VRC_Pickup vrc_Pickup in ItemLagger.pickups)
			{
				if (vrc_Pickup == null)
				{
					ItemLagger.pickups.Clear();
					break;
				}
				Collider collider = ((vrc_Pickup != null) ? vrc_Pickup.GetComponent<Collider>() : null);
				if (collider != null)
				{
					collider.enabled = isEnabled;
				}
			}
		}

		// Token: 0x060001F0 RID: 496 RVA: 0x0000D6E8 File Offset: 0x0000B8E8
		public static void MovePickups(Vector3 offset)
		{
			if (ItemLagger.pickups == null || ItemLagger.pickups.Count == 0 || !ItemLagger.IsEnabled)
			{
				return;
			}
			Vector3 vector = Networking.LocalPlayer.gameObject.transform.position + offset;
			foreach (VRC_Pickup vrc_Pickup in ItemLagger.pickups)
			{
				if (vrc_Pickup == null)
				{
					ItemLagger.pickups.Clear();
					break;
				}
				Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
				vrc_Pickup.transform.position = vector;
			}
		}

		// Token: 0x060001F1 RID: 497 RVA: 0x0000D79C File Offset: 0x0000B99C
		public static VRC_Pickup[] GetAllPickups()
		{
			IEnumerable<VRC_Pickup> enumerable = OnLoadedScaneManager.allBaseUdonItem.Where((VRC_Pickup x) => x.name != "PhotoCamera" && x.name != "AvatarDebugConsole" && x.name != "OscDebugConsole" && x.name != "DebugConsole" && x.name != "ViewFinder" && x.name != "MirrorPickup");
			if (enumerable == null)
			{
				return null;
			}
			return enumerable.ToArray<VRC_Pickup>();
		}

		// Token: 0x060001F2 RID: 498 RVA: 0x0000D7DE File Offset: 0x0000B9DE
		public static void CallapseState(bool s)
		{
			if (s)
			{
				MelonCoroutines.Start(ItemLagger.Collapse(PlayerExtensions.GetVRCPlayer()));
				return;
			}
			ItemLagger.bool_7 = false;
		}

		// Token: 0x060001F3 RID: 499 RVA: 0x0000D7FA File Offset: 0x0000B9FA
		public static IEnumerator Collapse(VRCPlayer player)
		{
			ItemLagger.bool_7 = true;
			IEnumerable<VRC_Pickup> pickups = from x in ItemLagger.GetAllPickups()
				where (x.GetComponent<Collider>() != null && x.GetComponent<Collider>().enabled) || (x.GetComponentInChildren<Collider>() != null && x.GetComponentInChildren<Collider>().enabled)
				select x;
			while (ItemLagger.bool_7 && player != null)
			{
				int num2;
				for (int i = 0; i < 20; i = num2 + 1)
				{
					foreach (VRC_Pickup vrc_Pickup in pickups)
					{
						float num = (float)(i - 1) * 0.05f;
						Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
						vrc_Pickup.transform.position = player.transform.position + new Vector3(0f, -0.1f + num, 0f);
						vrc_Pickup.transform.rotation = Quaternion.Euler(0f, 0f, 0f);
					}
					yield return new WaitForEndOfFrame();
					num2 = i;
				}
				yield return new WaitForSeconds(0.1f);
				foreach (VRC_Pickup vrc_Pickup2 in pickups)
				{
					Networking.LocalPlayer.TakeOwnership(vrc_Pickup2.gameObject);
					vrc_Pickup2.transform.position = Struct0.Vector3_0;
					vrc_Pickup2.transform.rotation = Quaternion.Euler(0f, 0f, 0f);
				}
				yield return new WaitForSeconds(0.1f);
			}
			ItemLagger.bool_7 = false;
			yield break;
		}

		// Token: 0x04000109 RID: 265
		public static float elapsedTime = 0f;

		// Token: 0x0400010A RID: 266
		public static float lagInterval = 0.1f;

		// Token: 0x0400010B RID: 267
		public static bool IsEnabled = false;

		// Token: 0x0400010C RID: 268
		public static bool bool_7;

		// Token: 0x0400010D RID: 269
		public static List<VRC_Pickup> pickups = new List<VRC_Pickup>();
	}
}
