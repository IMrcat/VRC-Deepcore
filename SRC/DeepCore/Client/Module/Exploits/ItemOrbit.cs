using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MelonLoader;
using ReMod.Core.VRChat;
using UnityEngine;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
	// Token: 0x0200005F RID: 95
	internal class ItemOrbit
	{
		// Token: 0x060001F6 RID: 502 RVA: 0x0000D837 File Offset: 0x0000BA37
		public static void State(bool s)
		{
			if (s)
			{
				ItemOrbit.isOrbiting = true;
				ItemOrbit.items = OnLoadedScaneManager.allBaseUdonItem.ToList<VRC_Pickup>();
				ItemOrbit.player = PlayerExtensions.GetVRCPlayer();
				MelonCoroutines.Start(ItemOrbit.OrbitItem());
				return;
			}
			ItemOrbit.isOrbiting = false;
		}

		// Token: 0x060001F7 RID: 503 RVA: 0x0000D86D File Offset: 0x0000BA6D
		public static IEnumerator OrbitItem()
		{
			float angle = 0f;
			while (ItemOrbit.isOrbiting)
			{
				if (ItemOrbit.player == null || ItemOrbit.items.Count == 0)
				{
					MelonLogger.Error("ItemOrbit: Player or items became null.");
					yield break;
				}
				angle += ItemOrbit.speed * Time.deltaTime;
				float itemSpacing = 6.2831855f / (float)ItemOrbit.items.Count;
				int num5;
				for (int i = 0; i < ItemOrbit.items.Count; i = num5 + 1)
				{
					VRC_Pickup item = ItemOrbit.items[i];
					if (!(item == null) && !(item.transform == null))
					{
						if (!Networking.IsOwner(item.gameObject))
						{
							Networking.SetOwner(Networking.LocalPlayer, item.gameObject);
							yield return new WaitForSeconds(0.05f);
						}
						Vector3 position = ItemOrbit.player.transform.position;
						float num = angle + (float)i * itemSpacing;
						float num2 = position.x + Mathf.Cos(num) * ItemOrbit.radius;
						float num3 = position.z + Mathf.Sin(num) * ItemOrbit.radius;
						float num4 = position.y + 1.5f;
						item.transform.position = new Vector3(num2, num4, num3);
						item.transform.LookAt(ItemOrbit.player.transform.position + Vector3.up * 1.5f);
						item = null;
					}
					num5 = i;
				}
				yield return null;
			}
			yield break;
		}

		// Token: 0x0400010E RID: 270
		public static List<VRC_Pickup> items = new List<VRC_Pickup>();

		// Token: 0x0400010F RID: 271
		public static VRCPlayer player;

		// Token: 0x04000110 RID: 272
		public static float radius = 0.5f;

		// Token: 0x04000111 RID: 273
		public static float speed = 3f;

		// Token: 0x04000112 RID: 274
		public static bool isOrbiting = false;
	}
}
