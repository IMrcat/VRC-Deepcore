using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using DeepCore.Client.Misc;
using Il2CppSystem.Collections.Generic;
using MelonLoader;
using ReMod.Core.VRChat;
using UnityEngine;
using VRC.Core;

namespace DeepCore.Client.Module.Exploits
{
	// Token: 0x02000059 RID: 89
	internal class AviYoinker
	{
		// Token: 0x060001D2 RID: 466 RVA: 0x0000CA50 File Offset: 0x0000AC50
		public static void Start()
		{
			try
			{
				using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("DeepCore.Yoink.exe"))
				{
					if (manifestResourceStream == null)
					{
						throw new Exception("Resource 'Yoink.exe' not found.");
					}
					MemoryStream memoryStream = new MemoryStream((int)manifestResourceStream.Length);
					manifestResourceStream.CopyTo(memoryStream);
					AviYoinker.assembly_0 = Assembly.Load(memoryStream.ToArray());
				}
				AviYoinker.GetUnpackerType = AviYoinker.assembly_0.GetTypes().First((Type type_0) => type_0.Name.Equals("Program"));
				AviYoinker.GetUnpackerMethod = AviYoinker.GetUnpackerType.GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First((MethodInfo methodInfo_0) => methodInfo_0.Name.Equals("Main"));
			}
			catch (Exception ex)
			{
				DeepConsole.E(ex);
			}
		}

		// Token: 0x060001D3 RID: 467 RVA: 0x0000CB38 File Offset: 0x0000AD38
		public static void ReuploadAvatar(ApiAvatar ApiAvatar, string AviName, string AviDesc, string ThumbnailUrl)
		{
			long.Parse("2173162573851");
			AviYoinker.Name = AviName;
			AviYoinker.Desc = AviDesc;
			AviYoinker.Thumbnail = ThumbnailUrl;
			DeepConsole.Log("AviYoinker", string.Concat(new string[]
			{
				"Reuploading:",
				ApiAvatar.name,
				"-",
				ApiAvatar.releaseStatus,
				" as ",
				AviName,
				"-",
				AviYoinker.Status
			}));
			if (string.IsNullOrEmpty(ApiAvatar.id))
			{
				DeepConsole.Log("AviYoinker", "Failed: No id found, aborted.");
				return;
			}
			AviYoinker.Clear();
			AviYoinker.SelectedAvatar = ApiAvatar;
			if (AviYoinker.SelectedAvatar == null)
			{
				DeepConsole.Log("AviYoinker", "Failed: Couldn't fetch avatar !");
				return;
			}
			AviYoinker.NewAvatarID = string.Format("avtr_{0}", Guid.NewGuid());
			API.Fetch<ApiAvatar>(AviYoinker.NewAvatarID, delegate
			{
				AviYoinker.ReuploadAvatar(ApiAvatar, AviName, AviDesc, ThumbnailUrl);
			}, delegate
			{
				Task.Run(async delegate
				{
					try
					{
						DeepConsole.Log("AviYoinker", "Downloading VRCA...");
						string text = AviYoinker.DLAvi(AviYoinker.SelectedAvatar);
						if (!string.IsNullOrEmpty(text))
						{
							DeepConsole.Log("AviYoinker", "Done.");
							DeepConsole.Log("AviYoinker", "Decompressing assetbundle...");
							string text2 = await AviYoinker.Bundle(text);
							DeepConsole.Log("AviYoinker", "Done.");
							DeepConsole.Log("AviYoinker", "Assetbundle created.");
							if (!string.IsNullOrEmpty(text2))
							{
								string text3 = AviYoinker.SelectedAvatar.unityVersion.ToLower();
								string text4 = AviYoinker.SelectedAvatar.platform.ToLower();
								string text5 = ApiAvatar.VERSION.ApiVersion.ToString().ToLower();
								if (string.IsNullOrEmpty(text5))
								{
									text5 = "4";
								}
								string.Concat(new string[]
								{
									"Avatar - ",
									AviYoinker.SelectedAvatar.name,
									" - Asset bundle - ",
									text3,
									"_",
									text5,
									"_",
									text4,
									"_Release"
								});
								TaskAwaiter<bool> taskAwaiter = AviYoinker.GenID(text2, AviYoinker.NewAvatarID, AviYoinker.SelectedAvatar.id).GetAwaiter();
								if (!taskAwaiter.IsCompleted)
								{
									await taskAwaiter;
									TaskAwaiter<bool> taskAwaiter2;
									taskAwaiter = taskAwaiter2;
									taskAwaiter2 = default(TaskAwaiter<bool>);
								}
								if (!taskAwaiter.GetResult())
								{
									DeepConsole.Log("AviYoinker", "Failed:  Unable to set a new Id !");
								}
								DeepConsole.Log("AviYoinker", "Compressing assetbundle...");
								TaskAwaiter<string> taskAwaiter3 = AviYoinker.CAB().GetAwaiter();
								if (!taskAwaiter3.IsCompleted)
								{
									await taskAwaiter3;
									TaskAwaiter<string> taskAwaiter4;
									taskAwaiter3 = taskAwaiter4;
									taskAwaiter4 = default(TaskAwaiter<string>);
								}
								if (!string.IsNullOrEmpty(taskAwaiter3.GetResult()))
								{
									AviYoinker.RegisterAction(delegate
									{
									});
								}
								else
								{
									DeepConsole.Log("AviYoinker", "Failed: Unable to compress assetbundle !");
								}
							}
						}
					}
					catch (Exception ex)
					{
						if (ex.ToString().Contains("You can't upload any files right now."))
						{
							VrcExtensions.AlertPopup("AviYoinker", "You can't upload any files right now !", 5);
						}
					}
				});
			}, false, 0);
		}

		// Token: 0x060001D4 RID: 468 RVA: 0x0000CC9C File Offset: 0x0000AE9C
		public static void askbeforeyoink()
		{
			bool SetName = false;
			bool SetDesc = false;
			bool SetThumbnailUrl = false;
			VRCPlayer a = PlayerExtensions.GetVRCPlayer();
			string Name = a._player.GetAvatarInfo().name;
			string Desc = a._player.GetAvatarInfo().description;
			string Thumbnail = a._player.GetAvatarInfo().imageUrl;
			PopupManagerExtensions.Alert2Box("AviYoinker", "Do you want to reupload " + a._player.field_Private_APIUser_0.displayName + "'s current avatar?", delegate
			{
				MelonCoroutines.Start(base.<askbeforeyoink>g__Start|2());
			}, delegate
			{
				Console.WriteLine("User declined to reupload the avatar.");
			}, "Yes", "No", null);
		}

		// Token: 0x060001D5 RID: 469 RVA: 0x0000CD84 File Offset: 0x0000AF84
		public static void Clear()
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Directory.GetCurrentDirectory() + "/DeepClient/Yoinker");
				FileInfo[] files = directoryInfo.GetFiles();
				for (int i = 0; i < files.Length; i++)
				{
					files[i].Delete();
				}
				DirectoryInfo[] directories = directoryInfo.GetDirectories();
				for (int i = 0; i < directories.Length; i++)
				{
					directories[i].Delete(true);
				}
			}
			catch
			{
			}
		}

		// Token: 0x060001D6 RID: 470 RVA: 0x0000CDF8 File Offset: 0x0000AFF8
		public static async Task<string> Bundle(string downloadedpath)
		{
			long.Parse("2173162573851");
			string text = string.Empty;
			if (File.Exists(downloadedpath))
			{
				string path = Path.Combine(AviYoinker.AssetBundlePath, Path.GetFileName(downloadedpath));
				File.Move(downloadedpath, path);
				if (File.Exists(path))
				{
					File.Delete(downloadedpath);
					AviYoinker.Boop(new string[] { path });
					await Task.Delay(1000);
					text = AviYoinker.GetVRCA(path);
					File.Delete(path);
				}
				path = null;
			}
			return text;
		}

		// Token: 0x060001D7 RID: 471 RVA: 0x0000CE3C File Offset: 0x0000B03C
		public static async Task<string> CAB()
		{
			long.Parse("2173162573851");
			string text2;
			try
			{
				string text = AviYoinker.GXMLF();
				if (string.IsNullOrEmpty(text))
				{
					text2 = string.Empty;
				}
				else
				{
					string directoryName = Path.GetDirectoryName(Application.dataPath);
					Directory.SetCurrentDirectory(AviYoinker.AssetBundlePath);
					AviYoinker.Boop(new string[] { text, "lz4hc" });
					await Task.Delay(1000);
					Directory.SetCurrentDirectory(directoryName);
					string text3 = AviYoinker.GLZ4HCF();
					if (!string.IsNullOrEmpty(text3))
					{
						string fileName = Path.GetFileName(text3.Remove(text3.IndexOf(".LZ4HC"), 6));
						string text4 = Path.Combine(AviYoinker.AssetBundlePath, fileName);
						File.Move(text3, text4);
						text2 = text4;
					}
					else
					{
						text2 = string.Empty;
					}
				}
			}
			catch (Exception)
			{
				text2 = string.Empty;
			}
			return text2;
		}

		// Token: 0x060001D8 RID: 472 RVA: 0x0000CE78 File Offset: 0x0000B078
		public static void RegisterAction(Action action_0)
		{
			List<Action> actions = AviYoinker.Actions;
			lock (actions)
			{
				AviYoinker.Actions.Add(action_0);
				AviYoinker.ActionsBool = true;
			}
		}

		// Token: 0x060001D9 RID: 473 RVA: 0x0000CEC4 File Offset: 0x0000B0C4
		private static string GXMLF()
		{
			string text = string.Empty;
			IEnumerable<string> enumerable = from Path in Directory.EnumerateFiles(AviYoinker.AssetBundlePath)
				select new FileInfo(Path) into File
				orderby File.CreationTime
				select File.FullName;
			if (enumerable.Any<string>())
			{
				foreach (string text2 in enumerable)
				{
					if (text2.EndsWith(".xml"))
					{
						text = text2;
					}
				}
				return text;
			}
			return text;
		}

		// Token: 0x060001DA RID: 474 RVA: 0x0000CF9C File Offset: 0x0000B19C
		public static async Task<bool> GenID(string filepath, string NewID, string OldID)
		{
			await Task.Delay(100);
			bool flag;
			try
			{
				byte[] array = File.ReadAllBytes(filepath);
				byte[] bytes = Encoding.ASCII.GetBytes(OldID);
				Encoding.ASCII.GetBytes(OldID.ToLower());
				byte[] bytes2 = Encoding.ASCII.GetBytes(NewID);
				if (!OldID.Contains("avtr_") && !OldID.Contains("wrld_"))
				{
					DeepConsole.Log("AviYoinker", "Custom ID found");
				}
				byte[] array2 = new byte[array.Length + bytes2.Length - bytes.Length];
				byte[] array3 = array;
				for (;;)
				{
					int num = AviYoinker.F7G98DFG7FDG(array3, bytes);
					if (num < 0)
					{
						break;
					}
					Buffer.BlockCopy(array3, 0, array2, 0, num);
					Buffer.BlockCopy(bytes2, 0, array2, num, bytes2.Length);
					Buffer.BlockCopy(array3, num + bytes.Length, array2, num + bytes2.Length, array3.Length - num - bytes.Length);
					array3 = array2;
				}
				File.WriteAllBytes(filepath, array2);
				DeepConsole.Log("AviYoinker", "Overwriting assetbundle...");
				flag = true;
			}
			catch (Exception ex)
			{
				MelonLogger.Error(ex.ToString());
				flag = false;
			}
			return flag;
		}

		// Token: 0x060001DB RID: 475 RVA: 0x0000CFF0 File Offset: 0x0000B1F0
		private static string GLZ4HCF()
		{
			long.Parse("2173162573851");
			string text = string.Empty;
			IEnumerable<string> enumerable = from Path in Directory.EnumerateFiles(AviYoinker.AssetBundlePath)
				select new FileInfo(Path) into File
				orderby File.CreationTime
				select File.FullName;
			if (enumerable.Any<string>())
			{
				foreach (string text2 in enumerable)
				{
					if (text2.EndsWith(".LZ4HC"))
					{
						text = text2;
					}
				}
				return text;
			}
			return text;
		}

		// Token: 0x060001DC RID: 476 RVA: 0x0000D0D4 File Offset: 0x0000B2D4
		public static void Boop(string[] string_21)
		{
			try
			{
				MethodInfo getUnpackerMethod = AviYoinker.GetUnpackerMethod;
				if (getUnpackerMethod != null)
				{
					getUnpackerMethod.Invoke(null, new object[] { string_21 });
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x060001DD RID: 477 RVA: 0x0000D114 File Offset: 0x0000B314
		public static int F7G98DFG7FDG(byte[] byte_0, byte[] byte_1)
		{
			for (int i = 0; i < byte_0.Length - byte_1.Length; i++)
			{
				bool flag = true;
				for (int j = 0; j < byte_1.Length; j++)
				{
					if (byte_0[i + j] != byte_1[j])
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x060001DE RID: 478 RVA: 0x0000D158 File Offset: 0x0000B358
		private static string GetVRCA(string path)
		{
			string text = string.Empty;
			IEnumerable<string> enumerable = from string_0 in Directory.EnumerateFiles(path + "_dump")
				select new FileInfo(string_0) into fileInfo_0
				orderby fileInfo_0.CreationTime
				select fileInfo_0.FullName;
			if (enumerable.Count<string>() != 1)
			{
				foreach (string text2 in enumerable)
				{
					if (string.IsNullOrEmpty(Path.GetExtension(text2)))
					{
						text = text2;
					}
				}
				return text;
			}
			return enumerable.ElementAt(0);
		}

		// Token: 0x060001DF RID: 479 RVA: 0x0000D240 File Offset: 0x0000B440
		public static string DLAvi(ApiAvatar apiAvatar_2)
		{
			byte[] array = new WebClient
			{
				Headers = { "User-Agent: Other" }
			}.DownloadData(apiAvatar_2.assetUrl);
			string text = Path.Combine(Path.GetTempPath(), Path.GetTempFileName() + ".vrca");
			File.WriteAllBytes(text, array);
			DeepConsole.Log("AviYoinker", text ?? "");
			return text;
		}

		// Token: 0x040000EF RID: 239
		public static string string_8;

		// Token: 0x040000F0 RID: 240
		public static Delegate ReferencedDelegate;

		// Token: 0x040000F1 RID: 241
		public static IntPtr MethodInfo;

		// Token: 0x040000F2 RID: 242
		public static List<MonoBehaviour> BruhMoments;

		// Token: 0x040000F3 RID: 243
		public static volatile bool ActionsBool;

		// Token: 0x040000F4 RID: 244
		public static List<Action> Actions = new List<Action>(10);

		// Token: 0x040000F5 RID: 245
		public static List<Action> Actions2 = new List<Action>(10);

		// Token: 0x040000F6 RID: 246
		private static string NewAvatarID = string.Empty;

		// Token: 0x040000F7 RID: 247
		private static ApiAvatar SelectedAvatar;

		// Token: 0x040000F8 RID: 248
		private static ApiAvatar apiAvatar_1;

		// Token: 0x040000F9 RID: 249
		private static ApiWorld ReuploadedWorld;

		// Token: 0x040000FA RID: 250
		private static string NewWorldID = string.Empty;

		// Token: 0x040000FB RID: 251
		private static ApiWorld SelectedWorld;

		// Token: 0x040000FC RID: 252
		private static ApiFile WorldAssetBundle;

		// Token: 0x040000FD RID: 253
		private static ApiFile AvatarAssetBundle;

		// Token: 0x040000FE RID: 254
		private static readonly string AssetBundlePath = "DeepClient\\Yoinker";

		// Token: 0x040000FF RID: 255
		private static Assembly assembly_0;

		// Token: 0x04000100 RID: 256
		private static Type GetUnpackerType;

		// Token: 0x04000101 RID: 257
		private static MethodInfo GetUnpackerMethod;

		// Token: 0x04000102 RID: 258
		public static string Name = "Yoinked with DeepClient";

		// Token: 0x04000103 RID: 259
		public static string Desc = "Yoinked with DeepClient";

		// Token: 0x04000104 RID: 260
		public static string Thumbnail = "";

		// Token: 0x04000105 RID: 261
		public static string Status = "private";
	}
}
