using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MelonLoader;
using UnityEngine;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
	// Token: 0x02000061 RID: 97
	internal class PenClapper
	{
		// Token: 0x060001FE RID: 510 RVA: 0x0000D8E7 File Offset: 0x0000BAE7
		public static void State(bool S)
		{
			if (S)
			{
				PenClapper.PenClap = true;
				MelonCoroutines.Start(PenClapper.PenCrash());
				return;
			}
			PenClapper.PenClap = false;
		}

		// Token: 0x060001FF RID: 511 RVA: 0x0000D904 File Offset: 0x0000BB04
		public static IEnumerator PenCrash()
		{
			for (;;)
			{
				if (PenClapper.PenClap)
				{
					yield return new WaitForSeconds(1f);
					try
					{
						List<VRC_Pickup> list = OnLoadedScaneManager.allBaseUdonItem.ToList<VRC_Pickup>();
						if (list != null)
						{
							foreach (VRC_Pickup vrc_Pickup in list)
							{
								foreach (string text in PenClapper.PenNames)
								{
									if (vrc_Pickup.name.ToLower().Contains(text) && !vrc_Pickup.transform.parent.name.ToLower().Contains("eraser"))
									{
										for (int i = 0; i < 60; i++)
										{
											VRC_Trigger component = vrc_Pickup.gameObject.GetComponent<VRC_Trigger>();
											VRC_Trigger component2 = vrc_Pickup.gameObject.GetComponent<VRC_Trigger>();
											vrc_Pickup.Drop();
											if (component != null)
											{
												vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnDrop();
											}
											if (component2 != null)
											{
												vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnDrop();
											}
											if (component != null)
											{
												vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickup();
											}
											if (component2 != null)
											{
												vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickup();
											}
											if (component != null)
											{
												vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickupUseDown();
											}
											if (component2 != null)
											{
												vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickupUseDown();
											}
											vrc_Pickup.transform.position = new Vector3(2.1474836E+09f, 2.1474836E+09f, 2.1474836E+09f) * 268f;
											vrc_Pickup.transform.position = new Vector3(-2.1474836E+09f, -2.1474836E+09f, -2.1474836E+09f) * 268f;
										}
									}
								}
							}
						}
					}
					catch (Exception ex)
					{
						DeepConsole.E(ex);
					}
				}
				yield return new WaitForEndOfFrame();
			}
			yield break;
		}

		// Token: 0x04000115 RID: 277
		public static bool PenClap = false;

		// Token: 0x04000116 RID: 278
		public static List<string> PenNames = new List<string> { "pen", "marker", "grip" };
	}
}
