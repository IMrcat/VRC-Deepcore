using System;
using DeepCore.Client.Misc;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;
using VRC.UI.Elements.Controls;

namespace DeepCore.Client.Module.Exploits
{
	// Token: 0x02000063 RID: 99
	internal class PortalEploits
	{
		// Token: 0x06000207 RID: 519 RVA: 0x0000DA44 File Offset: 0x0000BC44
		public static void DestroyPortals()
		{
			foreach (PortalInternal portalInternal in Object.FindObjectsOfType<PortalInternal>())
			{
				if (portalInternal.field_Private_Int32_0 != -1)
				{
					Object.DestroyImmediate(portalInternal.gameObject);
				}
			}
		}

		// Token: 0x06000208 RID: 520 RVA: 0x0000DAA4 File Offset: 0x0000BCA4
		public static void DestroyPortalsV2(bool log)
		{
			PortalInternal[] array = Resources.FindObjectsOfTypeAll<PortalInternal>();
			int num = 0;
			for (int i = 0; i < array.Length; i++)
			{
				if (!(array[i] == null))
				{
					TextMeshProUGUIEx componentInChildren = array[i].GetComponentInChildren<TextMeshProUGUIEx>();
					if ((componentInChildren.text.Contains("public") || componentInChildren.text.Contains("invite") || componentInChildren.text.Contains("friends")) && !componentInChildren.text.Contains(APIUser.CurrentUser.displayName))
					{
						Networking.Destroy(array[i].gameObject);
						num++;
					}
				}
			}
			if (log)
			{
				if (num == 1)
				{
					DeepConsole.Log("Portals", string.Format("Deleted {0} portal", num));
					return;
				}
				if (num > 1)
				{
					DeepConsole.Log("Portals", string.Format("Deleted {0} portal", num));
				}
			}
		}

		// Token: 0x06000209 RID: 521 RVA: 0x0000DB8E File Offset: 0x0000BD8E
		public static void DropPortalTid()
		{
			PopupHelper.PopupCall("World ID", "", "Ok", false, delegate(string userInput)
			{
				if (string.IsNullOrWhiteSpace(userInput) || !userInput.Contains(":"))
				{
					Debug.LogError("Invalid World ID format. Expected format: worldId:instanceId");
					return;
				}
				string[] array = userInput.Split(new char[] { ':' });
				if (array.Length < 2)
				{
					Debug.LogError("Invalid World ID format.");
					return;
				}
				string text = array[0];
				string text2 = array[1];
				ApiWorldInstance apiWorldInstance = new ApiWorldInstance();
				apiWorldInstance.id = userInput;
				apiWorldInstance.instanceId = text2;
				apiWorldInstance.worldId = text;
				apiWorldInstance.world = new ApiWorld
				{
					id = text
				};
				Action<ApiContainer> action = delegate(ApiContainer container)
				{
					new ApiModelContainer<ApiWorldInstance>().setFromContainer(container);
					ApiWorldInstance apiWorldInstance2 = container.Model as ApiWorldInstance;
					if (apiWorldInstance2 != null)
					{
						Vector3 vector = Networking.LocalPlayer.gameObject.transform.position + Vector3.forward * 1.505f;
						PhotonUtil.RaisePortalCreate(apiWorldInstance2.shortName, vector, 0f);
						return;
					}
					Debug.LogError("Failed to cast model container.");
				};
				apiWorldInstance.Fetch(action, null, null, false, 2);
			});
		}
	}
}
