using System;
using ReMod.Core.VRChat;
using UnityEngine;
using VRC;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
	// Token: 0x02000065 RID: 101
	internal class SwasticaOrbit
	{
		// Token: 0x0600020F RID: 527 RVA: 0x0000DCD2 File Offset: 0x0000BED2
		public static void State(bool s)
		{
			if (s)
			{
				SwasticaOrbit._target = PlayerExtensions.GetVRCPlayer();
				SwasticaOrbit._swastika = true;
				return;
			}
			SwasticaOrbit._swastika = false;
			SwasticaOrbit._target = null;
		}

		// Token: 0x06000210 RID: 528 RVA: 0x0000DCF4 File Offset: 0x0000BEF4
		public static void OnUpdate()
		{
			try
			{
				if (SwasticaOrbit._swastika)
				{
					try
					{
						if (SwasticaOrbit._target != null)
						{
							Vector3 bonePosition = SwasticaOrbit._target.field_Private_VRCPlayerApi_0.GetBonePosition(10);
							bonePosition.Set(bonePosition.x, bonePosition.y + 2f, bonePosition.z);
							SwasticaOrbit._setLocation = bonePosition;
						}
						if (Input.GetKeyDown(273))
						{
							SwasticaOrbit._swastikaSize += 2f;
						}
						else if (Input.GetKeyDown(274))
						{
							SwasticaOrbit._swastikaSize -= 2f;
						}
						if (SwasticaOrbit._rotateState >= 360f)
						{
							SwasticaOrbit._rotateState = Time.deltaTime;
						}
						else
						{
							SwasticaOrbit._rotateState += Time.deltaTime;
						}
						if (SwasticaOrbit._hasTakenOwner >= 90f)
						{
							SwasticaOrbit._hasTakenOwner = 0f;
							for (int i = 0; i < OnLoadedScaneManager.sdk3Items.Length; i++)
							{
								VRC_Pickup vrc_Pickup = OnLoadedScaneManager.sdk3Items[i];
								Networking.SetOwner(Player.Method_Internal_Static_get_Player_0().field_Private_VRCPlayerApi_0, vrc_Pickup.gameObject);
							}
						}
						else
						{
							SwasticaOrbit._hasTakenOwner += 1f;
						}
						float num = (float)Convert.ToInt16(OnLoadedScaneManager.sdk3Items.Length / 8);
						float num2 = (float)OnLoadedScaneManager.sdk3Items.Length / SwasticaOrbit._swastikaSize;
						for (int j = 0; j < OnLoadedScaneManager.sdk3Items.Length; j++)
						{
							VRC_Pickup vrc_Pickup2 = OnLoadedScaneManager.sdk3Items[j];
							float num3 = (float)(j % 8);
							float num4 = (float)(j / 8);
							float num5 = num3;
							if (num5 != 6f)
							{
								if (num5 != 5f)
								{
									if (num5 != 4f)
									{
										if (num5 != 3f)
										{
											if (num5 != 2f)
											{
												if (num5 != 1f)
												{
													if (num5 != 0f)
													{
														vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3((0f - Mathf.Cos(SwasticaOrbit._rotateState)) * num2 * (num4 / num), num2, Mathf.Sin(SwasticaOrbit._rotateState) * num2 * (num4 / num));
													}
													else
													{
														vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3(0f, num2 * (num4 / num), 0f);
													}
												}
												else
												{
													vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3(0f, (0f - num2) * (num4 / num), 0f);
												}
											}
											else
											{
												vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3((0f - Mathf.Cos(SwasticaOrbit._rotateState)) * num2 * (num4 / num), 0f, Mathf.Sin(SwasticaOrbit._rotateState) * num2 * (num4 / num));
											}
										}
										else
										{
											vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3((0f - Mathf.Cos(SwasticaOrbit._rotateState + SwasticaOrbit._setMultiplier)) * num2 * (num4 / num), 0f, Mathf.Sin(SwasticaOrbit._rotateState + SwasticaOrbit._setMultiplier) * num2 * (num4 / num));
										}
									}
									else
									{
										vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3((0f - Mathf.Cos(SwasticaOrbit._rotateState + SwasticaOrbit._setMultiplier)) * num2, num2 * (num4 / num), Mathf.Sin(SwasticaOrbit._rotateState + SwasticaOrbit._setMultiplier) * num2);
									}
								}
								else
								{
									vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3((0f - Mathf.Cos(SwasticaOrbit._rotateState)) * num2, (0f - num2) * (num4 / num), Mathf.Sin(SwasticaOrbit._rotateState) * num2);
								}
							}
							else
							{
								vrc_Pickup2.transform.position = SwasticaOrbit._setLocation + new Vector3((0f - Mathf.Cos(SwasticaOrbit._rotateState + SwasticaOrbit._setMultiplier)) * num2 * (num4 / num), 0f - num2, Mathf.Sin(SwasticaOrbit._rotateState + SwasticaOrbit._setMultiplier) * (num2 * (num4 / num)));
							}
							Vector3 originalVelocity = SwasticaOrbit._originalVelocity;
							if (false)
							{
								SwasticaOrbit._originalVelocity = vrc_Pickup2.GetComponent<Rigidbody>().velocity;
							}
							SwasticaOrbit._returnedValue = false;
							vrc_Pickup2.GetComponent<Rigidbody>().velocity = Vector3.zero;
							vrc_Pickup2.transform.rotation = Quaternion.Euler(0f, SwasticaOrbit._rotateState * -90f, 0f);
						}
						goto IL_04BC;
					}
					catch (Exception ex)
					{
						DeepConsole.LogConsole("Module : SwasticaOrbit", ex.Message);
						goto IL_04BC;
					}
				}
				if (SwasticaOrbit._returnedValue)
				{
					for (int k = 0; k < OnLoadedScaneManager.sdk3Items.Length; k++)
					{
						OnLoadedScaneManager.sdk3Items[k].GetComponent<Rigidbody>().velocity = SwasticaOrbit._originalVelocity;
					}
					SwasticaOrbit._returnedValue = true;
				}
				IL_04BC:;
			}
			catch (Exception ex2)
			{
				DeepConsole.LogConsole("Module : SwasticaOrbit", ex2.Message);
				SwasticaOrbit._itemOrbit = false;
			}
		}

		// Token: 0x0400011C RID: 284
		public static VRCPlayer _target;

		// Token: 0x0400011D RID: 285
		public static bool _blind = false;

		// Token: 0x0400011E RID: 286
		public static bool _instance = false;

		// Token: 0x0400011F RID: 287
		public static bool _itemOrbit;

		// Token: 0x04000120 RID: 288
		public static bool _swastika;

		// Token: 0x04000121 RID: 289
		public static GameObject _targetItem;

		// Token: 0x04000122 RID: 290
		internal static Vector3 _setLocation;

		// Token: 0x04000123 RID: 291
		public static float _swastikaSize = 45f;

		// Token: 0x04000124 RID: 292
		public static float _hasTakenOwner = 1999f;

		// Token: 0x04000125 RID: 293
		public static float _setMultiplier = 160f;

		// Token: 0x04000126 RID: 294
		public static float _rotateState;

		// Token: 0x04000127 RID: 295
		public static Vector3 _originalVelocity;

		// Token: 0x04000128 RID: 296
		public static bool _returnedValue;
	}
}
