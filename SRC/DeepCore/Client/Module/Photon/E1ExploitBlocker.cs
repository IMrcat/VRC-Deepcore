using System;
using System.Linq;
using DeepCore.Client.Misc;
using ExitGames.Client.Photon;
using Il2CppSystem;
using MelonLoader;
using UnhollowerBaseLib;
using UnhollowerRuntimeLib;

namespace DeepCore.Client.Module.Photon
{
	// Token: 0x02000048 RID: 72
	internal class E1ExploitBlocker
	{
		// Token: 0x060001A3 RID: 419 RVA: 0x0000B96C File Offset: 0x00009B6C
		public static bool CheckUSpeak(EventData __0)
		{
			if (__0.Code == 1)
			{
				Object customData = __0.customData;
				if (customData != null)
				{
					byte[] array = E1ExploitBlocker.TryConvertToManagedByteArray(customData);
					if (array != null)
					{
						string text = Convert.ToBase64String(array);
						if (E1ExploitBlocker.E1_PAYLOADS.Contains(text))
						{
							string text2 = string.Format("Blocked incoming E1 exploit event (code {0}). Known payload detected.", __0.Code);
							DeepConsole.Log("Photon", text2);
							VrcExtensions.HudNotif(text2);
							return false;
						}
					}
				}
			}
			return true;
		}

		// Token: 0x060001A4 RID: 420 RVA: 0x0000B9DC File Offset: 0x00009BDC
		public static byte[] TryConvertToManagedByteArray(Object il2cppObj)
		{
			try
			{
				if (il2cppObj.GetIl2CppType().Equals(Il2CppType.Of<Il2CppStructArray<byte>>()))
				{
					return il2cppObj.Cast<Il2CppStructArray<byte>>().ToArray<byte>();
				}
				Il2CppArrayBase<Byte> il2CppArrayBase = il2cppObj.TryCast<Il2CppArrayBase<Byte>>();
				if (il2CppArrayBase != null)
				{
					int length = il2CppArrayBase.Length;
					byte[] array = new byte[length];
					for (int i = 0; i < length; i++)
					{
						array[i] = il2CppArrayBase[i].m_value;
					}
					return array;
				}
			}
			catch (Exception ex)
			{
				MelonLogger.Error(string.Format("[Security] Byte array conversion error: {0}", ex));
			}
			return null;
		}

		// Token: 0x040000D7 RID: 215
		private static readonly string[] E1_PAYLOADS = new string[]
		{
			"QwYAAEWhESjzrD0A+PTUA4+bi+0LaUxtDTCBf75zt9hhu0RMSn256S+Z5UFCa3TTpz7Vn+dqmsK22eM1c3QV2OkEnvb+V/VMgfSsPQD49NQ67K6//enjQ8caLBaso6feWZyjV1q6GQ09u6w6bw91CJzBBv8QxGNMEa8S0ZHgYsGLpNZYHzhn03iA9aw9APj0cbv6WD3sl6rbmZYvfDksrFMhDuaBoQeYWfXNDDFik9egcVcvAPfocJkwpJ7vRPS5QgCfiNUdn/AGbIH2rD0A+PTUNLlMaIau6JuUEFFVYpv/yWOVDLSshOI1mmUB9ujkr8KEmIu3keB87DekOFGRmaNgu8TWVvVXjTLogPesPQD49HQVoW8ADMH2KouFZ8eZB3tv/2X+ld6MklOeIE7HE+cY+m1QEkeUgdM0Fc+vQi5ZI21+sAEnmaXx1WqB", "AgAAAKWkyYm7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7DrSy5tkRecs21ljjofvebe6xsYlA4cVmgrd0=", "CAAAADx3SG8eYzoAeJYLkm09XMKdEYOE+l/Enz9tFP5pplHGi/o+XDjCGrpnUeqSW8wWfhfzPXkD9ReI8ioo7fXi1GOdZB9jMgB4n64Y5JoaLUt0dZXF/XHDuQFpIj73SHaA0FyjQrj1oIU81HPlhGZy3NqVLFXilJVY4Q==", "AAAAAGfp+Lv2GRkA+DrJaWerbtZm+SX2//kATwCqqvu/z6rLog==", "AAAAAGfp+Lv2GRkA+DrDusChW99guelWc00gcgDuhh911CBUpe==", "AAAAAGfp+Lv2GRkA+DrDusChW99tttlWc00gcgDuhh911CBUpe==", "AAAAAGfp+Lv2GRkA+DrDussssss99wssstssssstttsswwsese==", "AAAAAGfp+Lv2GRkA+DrDusChW99guelWc00gcgDuhh911CBUpe==", "AAAAAGfp+Lv2GRkA+DrJaWerbistduJawerbistdujawerbist==", "AAAAAGfp+Lv2GRkA+DrDusChW9QFHJlWc00gcgDuhh911CBUpe==",
			"AAAAAGfp+Lv2GRkA+DrDufffffftrhehfgdhgdrgerer1CBUpe==", "AAAAAOlO/DO7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7DrSy5tkRecs21ljjofvebe6xsYlA4cVmgrd0="
		};
	}
}
